//SPDX-License-Identifier: Unlincensed
pragma solidity ^0.8.0;
// Define a contract 'Supplychain'

import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeecore/Ownable.sol";
import "../utils/Strings.sol";

contract SupplyChain is Ownable, FarmerRole, DistributorRole, RetailerRole, ConsumerRole{

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (string => Item) items;

  // Define a public mapping 'itemsHistory' that maps the ProductId to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
    }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    string  productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(string productId);
  event Processed(string productId);
  event Packed(string productId);
  event ForSale(string productId);
  event Sold(string productId);
  event Shipped(string productId);
  event Received(string productId);
  event Purchased(string productId);

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(string memory _productId) {
    _;
    uint _price = items[_productId].productPrice;
    uint amountToReturn = msg.value - _price;
    payable(msg.sender).transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a productId is Harvested
  modifier harvested(string memory _productId) {
    require(items[_productId].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a productId is Processed
  modifier processed(string memory _productId) {
    require(items[_productId].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a productId is Packed
  modifier packed(string memory _productId) {
    require(items[_productId].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a productId is ForSale
  modifier forSale(string memory _productId) {
    require(items[_productId].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a productId is Sold
  modifier sold(string memory _productId) {
    require(items[_productId].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a productId is Shipped
  modifier shipped(string memory _productId) {
    require(items[_productId].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a productId is Received
  modifier received(string memory _productId) {
    require(items[_productId].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a productId is Purchased
  modifier purchased(string memory _productId) {
    require(items[_productId].itemState == State.Purchased);    
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() Ownable() FarmerRole() DistributorRole() RetailerRole() ConsumerRole() payable {
    sku = 1;
  }

  // Define a function 'kill' if required
  function kill() public onlyOwner {
      selfdestruct(payable(owner()));
    
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc, address _originFarmerID, string memory _originFarmName, string memory _originFarmInformation, string memory _originFarmLatitude, string  memory _originFarmLongitude, string  memory _productNotes) public 
  onlyFarmer
  {
    // Add the new item as part of Harvest
    string memory _productId = string(abi.encodePacked(Strings.toString(_upc), "-", Strings.toString(sku)));

    items[_productId].upc = _upc;
    items[_productId].sku = sku;
    items[_productId].ownerID = _originFarmerID;
    items[_productId].productID = _productId;
    items[_productId].originFarmerID = _originFarmerID;
    items[_productId].originFarmName = _originFarmName;
    items[_productId].originFarmInformation = _originFarmInformation;
    items[_productId].originFarmLatitude = _originFarmLatitude;
    items[_productId].originFarmLongitude = _originFarmLongitude;
    items[_productId].productNotes = _productNotes;
    items[_productId].itemState = State.Harvested;
   
    

    
    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Harvested(_productId);
    
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(string memory _productId) public 
  // Call modifier to check if upc has passed previous supply chain stage
  harvested(_productId)
  // Call modifier to verify caller of this function
  onlyFarmer
  
  {
    // Update the appropriate fields
    items[_productId].itemState = State.Processed;
    // Emit the appropriate event
    emit Processed(_productId);
    
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(string memory _productId) public 
  // Call modifier to check if productId has passed previous supply chain stage
  processed(_productId)
  // Call modifier to verify caller of this function
  onlyFarmer
  {
    // Update the appropriate fields
    items[_productId].itemState = State.Packed;
    
    // Emit the appropriate event
    emit Packed(_productId);
    
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(string memory _productId, uint _price) public 
  // Call modifier to check if productId has passed previous supply chain stage
  packed(_productId)
  // Call modifier to verify caller of this function
  onlyFarmer
  {
    // Update the appropriate fields
    items[_productId].itemState = State.ForSale;
    items[_productId].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_productId);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(string memory _productId) public payable 
    onlyDistributor
    // Call modifier to check if productID has passed previous supply chain stage
    forSale(_productId)
    // Call modifer to check if buyer has paid enough
    paidEnough(items[_productId].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_productId)
    {
    
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_productId].itemState = State.Sold;
    items[_productId].ownerID = msg.sender;
    items[_productId].distributorID = msg.sender;
    // Transfer money to farmer
    payable(items[_productId].originFarmerID).transfer(items[_productId].productPrice);
    // emit the appropriate event
    emit Sold(_productId);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(string memory _productId) public 
    // Call modifier to check if productId has passed previous supply chain stage
    sold(_productId)
    // Call modifier to verify caller of this function
    onlyDistributor
    {
    // Update the appropriate fields
    items[_productId].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_productId);
    
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(string memory _productId) public 
    // Call modifier to check if productId has passed previous supply chain stage
    shipped(_productId)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyRetailer
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_productId].ownerID = msg.sender;
    items[_productId].retailerID = msg.sender;
    items[_productId].itemState = State.Received;
    
    // Emit the appropriate event
    emit Received(_productId);
    
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(string memory _productId) public 
    // Call modifier to check if productId has passed previous supply chain stage
    received(_productId)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyConsumer
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_productId].ownerID = msg.sender;
    items[_productId].consumerID = msg.sender;
    items[_productId].itemState = State.Purchased;
    
    // Emit the appropriate event
    emit Purchased(_productId);
    
  }

//give account all roles, this function is for testing purposes
  function addAllRoles(address account) public {
    addFarmer(account);
    addDistributor(account);
    addRetailer(account);
    addConsumer(account);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(string memory _productId) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  memory originFarmName,
  string  memory originFarmInformation,
  string  memory originFarmLatitude,
  string  memory originFarmLongitude
  ) 
  {
  // Assign values to the 8 parameters

  itemSKU = items[_productId].sku;
  itemUPC = items[_productId].upc;
  ownerID = items[_productId].ownerID;
  originFarmerID = items[_productId].originFarmerID;
  originFarmName = items[_productId].originFarmName;
  originFarmInformation = items[_productId].originFarmInformation;
  originFarmLatitude = items[_productId].originFarmLatitude;
  originFarmLongitude = items[_productId].originFarmLongitude;
  
    
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  originFarmInformation,
  originFarmLatitude,
  originFarmLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(string memory _productId) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  string  memory productID,
  string  memory productNotes,
  uint    productPrice,
  uint    itemState,
  address distributorID,
  address retailerID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  itemSKU = items[_productId].sku;
  itemUPC = items[_productId].upc;
  productID = items[_productId].productID;
  productNotes = items[_productId].productNotes;
  productPrice = items[_productId].productPrice;
  itemState = uint(items[_productId].itemState);
  distributorID = items[_productId].distributorID;
  retailerID = items[_productId].retailerID;
  consumerID = items[_productId].consumerID;
    
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  distributorID,
  retailerID,
  consumerID
  );
  }
}
